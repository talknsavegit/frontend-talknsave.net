<?php/** * @wordpress-plugin * Plugin Name:       TNS Admin2 * Plugin URI:        _ * Version:           2.0.0 * Author:            Michael Staszewski * Author URI:        _ * Text Domain:       tnsadmin * Domain Path:       /languages */// If this file is called directly, abort.if ( ! defined( 'WPINC' ) ) {    die;}function tns_admin2(){ ?>    Plugin: <select id="selectPlugin"></select><br>    Bundle id: <input type="text" id="inputBundleId"></input><br>    <button id="btnImportSublinks">Import sublinks for the bundle id</button>    <script type="text/javascript" >        jQuery(document).ready(function($) {            var data = {                'action': 'tns_get_plugins2'            };            jQuery.post(ajaxurl, data, function(response) {                //alert(JSON.parse(response)[0].name);                //alert('Got this from the server: ' + response);                var arrPlugins = JSON.parse(response);                var select = document.getElementById('selectPlugin');                for (var i=0;i<arrPlugins.length;i++) {                    var opt = document.createElement('option');                    opt.value = arrPlugins[i].name;                    opt.innerHTML = arrPlugins[i].name;                    select.appendChild(opt);                }            });            jQuery("#btnImportSublinks").click(function(event) {                event.preventDefault();                var e = document.getElementById("selectPlugin");                var strPluginName = e.options[e.selectedIndex].value;                var strInputBundle = jQuery("#inputBundleId").val();                var data = {                    'action': 'tns_import_sublinks2',                    'plugin_name': "'" + strPluginName + "'",                    'bundle_id': "'" + strInputBundle + "'"                };                jQuery.post(ajaxurl, data, function(response) {                    var abc = jQuery("#wpbody-content");                    abc.append("<div>"+'Got this from the server: ' + response+"</div>");                });            });        });    </script><?php }function tns_admin2_setup_menu() {    add_menu_page( 'TNS Admin Page', 'TNS Admin', 'manage_options', 'tns-admin-plugin', 'tns_admin2' );}add_action( 'admin_menu', 'tns_admin2_setup_menu');add_action( 'wp_ajax_tns_get_plugins2', 'tns_get_plugins2' );add_action( 'wp_ajax_tns_import_sublinks2', 'tns_import_sublinks2' );function tns_import_sublinks2() {    //echo $_POST['action'];    //echo "\n";    //echo $_POST['plugin_name'];    //echo "\n";    //echo $_POST['bundle_id'];    //echo "\n";    if ($_POST['mssql_server_ip'] == null) {        $_POST['mssql_server_ip'] = '185.28.154.71';    }    if ($_POST['mssql_server_dbname'] == null) {        $_POST['mssql_server_dbname'] = 'DBOR_Online';    }    if ($_POST['mssql_server_username'] == null) {        $_POST['mssql_server_username'] = "tns_ssis";    }    if ($_POST['mssql_server_password'] == null) {        $_POST['mssql_server_password'] = "2233";    }    if ($_POST['mysql_server_ip'] == null) {        $_POST['mysql_server_ip'] = DB_HOST;    }    if ($_POST['mysql_server_dbname'] == null) {        $_POST['mysql_server_dbname'] = DB_NAME;    }    if ($_POST['mysql_server_username'] == null) {        $_POST['mysql_server_username'] = DB_USER;    }    if ($_POST['mysql_server_password'] == null) {        $_POST['mysql_server_password'] = DB_PASSWORD;    }    $mysql_db = mysqli_connect(stripslashes($_POST['mysql_server_ip']),        stripslashes($_POST['mysql_server_username']),        stripslashes($_POST['mysql_server_password']),        stripslashes($_POST['mysql_server_dbname']));    //Data Source=185.28.154.71;Initial Catalog=DBOR_Online;Persist Security Info=True;User ID=tns_ssis;Password=2233    //$db = new PDO("odbc:Server=185.28.154.71;Database=DBOR_Online", "tns_ssis", "2233");    //odbc_connect("Driver={SQL Server Native Client 10.0};Server=$server;Database=$database;", $user, $password);    $pdo = null;    try {        $pdo = new \PDO(            sprintf(                "dblib:host=%s;dbname=%s",                stripslashes($_POST['mssql_server_ip']),                stripslashes($_POST['mssql_server_dbname'])            ),            stripslashes($_POST['mssql_server_username']),            stripslashes($_POST['mssql_server_password'])        );        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);    } catch (PDOException $e) {        echo "There was a problem connecting. " . $e->getMessage();    }    $query = "SELECT * FROM [tblBundlesSubLinks] WHERE [BundleId]=".stripslashes($_POST['bundle_id']);    //$query = "SELECT [Counter],[GroupName],[Active],[StartDate],[EndDate],[url],[SubLink] FROM [tblSubLinks] WHERE [SubLink]=".stripslashes($_POST['bundle_id']);//MyTable WHERE Username = :username";    $statement = $pdo->prepare($query);    //$statement->bindValue(":username", "sanitizeduserinputusername", PDO::PARAM_STR);    $statement->execute();    $results = $statement->fetchAll(PDO::FETCH_ASSOC);    foreach ($results as $result) {        $query = "SELECT [Counter],[GroupName],[Active],[StartDate],[EndDate],[url],[SubLink] FROM [tblSubLinks] WHERE [Counter]=".stripslashes($result['SubLinkId']);        $statement = $pdo->prepare($query);        $statement->execute();        $results2 = $statement->fetchAll(PDO::FETCH_ASSOC);        foreach ($results2 as $result2) {            //print_r($result2);            $sql =                "INSERT INTO `tns_sublinks` " .                "(`id`, `name`, `logo`, `sublink_id`, `replacement_link_id`, `priority`, `hidden`, `start_date`, `end_date`, `url`) " .                "VALUES " .                "(NULL, '" .                $result2['GroupName'] .                "', '', '" .                $result2['Counter'] .                "', '-1', 'NORMAL', '" .                (($result2['Active'] == 0) ? '1' : '0') .                "', '" .                $result2['StartDate'] .                "', '" .                $result2['EndDate'] .                "', '" .                $result2['url'] .                "')";            $mysql_db->query($sql);            $sql =                "INSERT INTO `tns_sublink_to_bundles` " .                "(`id`, `sublink_id`, `bundle_id`) " .                "VALUES " .                "(NULL, " .                $result2['Counter'] .                ", " .                stripslashes($_POST['bundle_id']) .                ")";            $mysql_db->query($sql);        }    }    $mysql_db->close();    $pdo=null;    print("Done.\n");    wp_die();}function tns_get_plugins2() {    global $wpdb;    $results= $wpdb->get_results( 'SELECT * FROM tns_plugins', OBJECT );    $list = array();    foreach ($results as $result) {        $list[] = array('id' => $result->id, 'name' => $result->name);    }    echo json_encode($list);    wp_die(); // this is required to terminate immediately and return a proper response}function unsetGenerated($setArray){    if (key_exists('generatedUrl', $setArray)) {        unset($setArray['generatedUrl']);    }    if (key_exists('generatedMobileHotspot', $setArray)) {        unset($setArray['generatedMobileHotspot']);    }    if (key_exists('generatedIntlTexting', $setArray)) {        unset($setArray['generatedIntlTexting']);    }    if (key_exists('generatedIsrTexting', $setArray)) {        unset($setArray['generatedIsrTexting']);    }    if (key_exists('generatedTalk', $setArray)) {        unset($setArray['generatedTalk']);    }    if (key_exists('generatedInternet', $setArray)) {        unset($setArray['generatedInternet']);    }    if (key_exists('generatedMotto', $setArray)) {        unset($setArray['generatedMotto']);    }    if (key_exists('generatedLogoUrl', $setArray)) {        unset($setArray['generatedLogoUrl']);    }    if (key_exists('generatedTitle', $setArray)) {        unset($setArray['generatedTitle']);    }    if (key_exists('generatedPriceText', $setArray)) {        unset($setArray['generatedPriceText']);    }    return $setArray;}function sanitize_text_field2($input){    $input = htmlspecialchars($input, $double_encode = false);    $input = str_replace('\"', '"', $input);    return $input;}add_action('plugins_loaded', 'tns_edit_table_init');function tns_edit_table_init(){    load_plugin_textdomain('tns_edit_table', false, basename(dirname(__FILE__)) . '/lang/');}//load the options pagerequire('eat_options.php');// main function for dashboard widgetfunction tns_edit_table(){    echo "<script id=\"eatScript\" type=\"text/javascript\">";    require('assets/eat_scripts.js');    echo "</script>";    wp_enqueue_script('jquery-ui-dialog');    wp_enqueue_style("wp-jquery-ui-dialog");    $options = get_option('eat_options');    //$eat_db = new wpdb($options['eat_user'], $options['eat_pwd'], $options['eat_db'], $options['eat_host']);    global $wpdb;    $eat_db = $wpdb;    if (!$eat_db->dbh) {        echo '<strong>' . __('Unable to connect to database, check your settings', 'tns_edit_table') . '</strong>';        return;    }    ?>    <!-- Store the number of columns to be displayed which can be passed across to the next page -->    <input type="hidden" id="eat_cols" value="<?php echo $options['eat_cols']; ?>"/>    <!-- get and store the plugin path so that it is accessible -->    <input type="hidden" id="eat_path" value="<?php echo plugin_dir_url(__FILE__); ?>"/>    <br/>    <button class="button-primary"            title="<?php _e('Open selected table', 'tns_edit_table'); ?>"            id="buttonGo"><?php _e('Open', 'tns_edit_table'); ?></button>    <select id="selectedTable">        <option value="NONE">*<?php _e('Choose Table to Edit', 'tns_edit_table') ?>*&nbsp;&nbsp;</option>        <?php        foreach ($options as $option) {            if (strpos($option, 'eat_table_') !== false) {                //only show tables selected in the settings                $tableName = substr($option, 10);                ?>                <option value="<?php echo $tableName; ?>"><?php echo $tableName; ?></option>                <?php            }        }        ?>    </select>    <?php _e('on database', 'tns_edit_table'); ?>:    <strong><?php echo($options['eat_friendly'] == "" ? $options['eat_db'] : $options['eat_friendly']) ?></strong>    <div id="outputDiv"></div>    <button id="gloriousNewRow" style="display:none">Insert a row</button>    <script>    </script>    <?php}add_action('wp_ajax_RegenerateTable', 'RegenerateTable');function RegenerateTable(){    require('regeneratetable.php');    $regenerateTableClass = new RegenerateTableClass();    try {        echo $regenerateTableClass->main();    } catch (Exception $exception) {        echo $exception;    }    die();}add_action('wp_ajax_UpdateRecord', 'UpdateSelected');function UpdateSelected(){    //get the posted values    $table2Edit = $_POST['table2Edit'];    $keys = $_POST['keys'];    $values = $_POST['values'];    $keysU = $_POST['keysU'];    $valuesU = $_POST['valuesU'];    // get the key/value pairs for the update primaries    $keysArray = explode("~", $keys);    $valsArray = explode("~", $values);    // get the key/value pairs for the update sets    $keysUArray = explode("~", $keysU);    $valsUArray = explode("~", $valuesU);    if (count($keysArray) == 0) {        echo '<br />' . __('Cannot update this record because there are no primary keys in the table', 'tns_edit_table');    } else {        //build where array        $whereArray = array();        for ($i = 0; $i < count($keysArray); $i++) {            if ($keysArray[$i] != "") {                $newParam = array($keysArray[$i] => sanitize_text_field2($valsArray[$i]));                $whereArray = array_merge($whereArray, $newParam);            }        }        //build set commands        $setArray = array();        for ($i = 0; $i < count($keysUArray); $i++) {            if ($keysUArray[$i] != "") {                $newParam = array($keysUArray[$i] => sanitize_text_field2($valsUArray[$i]));                $setArray = array_merge($setArray, $newParam);            }        }        //Connect to the database        $options = get_option('eat_options');        //$eat_db = new wpdb($options['eat_user'], $options['eat_pwd'], $options['eat_db'], $options['eat_host']);        global $wpdb;        $eat_db = $wpdb;        //var_dump($setArray);        $setArray = unsetGenerated($setArray);        if ($eat_db->update($table2Edit, $setArray, $whereArray)) {            echo '<br /><strong>' . __('Record Updated', 'tns_edit_table') . '</strong>';        } else {            echo '<br /><strong>' . __('Unable to update record', 'tns_edit_table') . '</strong><br />' . __('This is usually because nothing has changed or the record no longer exists.', 'tns_edit_table');        }        if (current_user_can('administrator') && $options['eat_debug'] == 'ON') {            echo '<br /><strong>DEBUG MODE ON</strong><br />' . $eat_db->last_query;        }    }    die();}add_action('wp_ajax_DeleteRecord', 'DeleteSelected');function DeleteSelected(){    //get the posted values    $table2Edit = $_POST['table2Edit'];    $keys = $_POST['keys'];    $values = $_POST['values'];    // get the key/value pairs for the delete    $keysArray = explode("~", $keys);    $valsArray = explode("~", $values);    if (count($keysArray) == 0) {        echo '<br />' . __('Cannot delete this record because there are no primary keys in the table', 'tns_edit_table');    } else {        //Connect to the database        $options = get_option('eat_options');        //$eat_db = new wpdb($options['eat_user'], $options['eat_pwd'], $options['eat_db'], $options['eat_host']);        global $wpdb;        $eat_db = $wpdb;        $cols = $eat_db->get_results("show columns from " . $table2Edit);        //build where        $where = "";        $vals = array();        for ($i = 0; $i < count($keysArray); $i++) {            $isNumeric = 0;            foreach ($cols as $col) {                if ($col->Field == $keysArray[$i]) {                    $isNumeric =                        strpos($col->Type, "int") !== false ||                        strpos($col->Type, "decimal") !== false ||                        strpos($col->Type, "float") !== false ||                        strpos($col->Type, "double") !== false ||                        strpos($col->Type, "real") !== false ||                        strpos($col->Type, "bit") !== false ||                        strpos($col->Type, "boolean") !== false ||                        strpos($col->Type, "serial") !== false;                }            }            if ($keysArray[$i] != "") {                if ($i != 0) {                    $where = $where . " and ";                }                if ($isNumeric) {                    $where = $where . $keysArray[$i] . " = %d";                } else {                    $where = $where . $keysArray[$i] . " = %s";                }                $vals[] = sanitize_text_field2($valsArray[$i]);            }        }        //prepare the delete statement        $sql = $eat_db->prepare("DELETE from " . $table2Edit . " where " . $where, $vals);        $result = $eat_db->query($sql);        if ($result) {            echo '<br /><strong>' . __('Record Deleted', 'tns_edit_table') . '</strong>';        } else {            echo '<br /><strong>' . __('Unable to delete record', 'tns_edit_table') . '</strong><br />';            $eat_db->show_errors();            $eat_db->print_error();            $eat_db->hide_errors();        }        if (current_user_can('administrator') && $options['eat_debug'] == 'ON') {            echo '<br /><strong>DEBUG MODE ON</strong><br />' . $eat_db->last_query;        }    }    die();}add_action('wp_ajax_AddRecord', 'CreateRecord');function CreateRecord(){    //get the posted values    $table2Edit = $_POST['table2Edit'];    $keys = $_POST['keys'];    $values = $_POST['values'];    $eat_cols = $_POST['eat_cols'];    $offSet = "0";    ?>    <!-- Store the values we need but don't want to show in hidden fields which can be passed across to the next page -->    <input type="hidden" id="eat_cols" value="<?php echo $eat_cols; ?>"/>    <input type="hidden" id="keys" value="<?php echo $keys ?>"/>    <input type="hidden" id="values" value="<?php echo $values ?>"/>    <input type="hidden" id="offSet" value="<?php echo $offSet ?>"/>    <?php    // get key/value pairs for the insert    $keysArray = explode("~", $keys);    $valsArray = explode("~", $values);    //build the array for the insert    $insertArray = array();    for ($i = 0; $i < count($keysArray); $i++) {        if ($keysArray[$i] != "") {            $newParam = array($keysArray[$i] => sanitize_text_field2($valsArray[$i]));            $insertArray = array_merge($insertArray, $newParam);        }    }    //Connect to the database    $options = get_option('eat_options');    //$eat_db = new wpdb($options['eat_user'], $options['eat_pwd'], $options['eat_db'], $options['eat_host']);    global $wpdb;    $eat_db = $wpdb;    if ($eat_db->insert($table2Edit, $insertArray)) {        echo '<br />' . __('New Record Created', 'tns_edit_table');    } else {        echo '<br />' . __('Unable to create new record', 'tns_edit_table') . '<br />';        $eat_db->show_errors();        $eat_db->print_error();        $eat_db->hide_errors();    }    if (current_user_can('administrator') && $options['eat_debug'] == 'ON') {        echo '<br /><strong>DEBUG MODE ON</strong><br />' . $eat_db->last_query;    }    die();}//PHP functions to handle the Ajax requestsadd_action('wp_ajax_GetRecords', 'ReturnRecords');function ReturnRecords(){    $table2Edit = $_POST['table2Edit'];    $keys = $_POST['keys'];    $values = $_POST['values'];    $offSet = $_POST['offSet'];    $eat_cols = $_POST['eat_cols'];    $fuzzy = $_POST['fuzzy'];    ?>    <!-- Store the values we need but don't want to show in hidden fields which can be passed across to the next page -->    <input type="hidden" id="eat_cols" value="<?php echo $eat_cols; ?>"/>    <input type="hidden" id="keys" value="<?php echo $keys ?>"/>    <input type="hidden" id="values" value="<?php echo $values ?>"/>    <input type="hidden" id="offSet" value="<?php echo $offSet ?>"/>    <input type="hidden" id="fuzzy" value="<?php echo $fuzzy ?>"/>    <?php    // get the users data    $keysArray = explode("~", $keys);    $valsArray = explode("~", $values);    //Connect to the database    $options = get_option('eat_options');    //$eat_db = new wpdb($options['eat_user'], $options['eat_pwd'], $options['eat_db'], $options['eat_host']);    global $wpdb;    $eat_db = $wpdb;    //Get column information    $cols = $eat_db->get_results("show columns from " . $table2Edit);    $cols2 = [];    for ($iter = 0; $iter < sizeof($cols); $iter++) {        if ($cols[$iter]->Extra != 'VIRTUAL GENERATED') {            $cols2[] = $cols[$iter];        }    }    $cols = $cols2;    unset($cols2);    //build where    $where = "";    $vals = array();    for ($i = 0; $i < count($keysArray); $i++) {        //need to find out if the value is for a numeric field or not        $isNumeric = 0;        foreach ($cols as $col) {            if ($col->Field == $keysArray[$i]) {                $isNumeric =                    strpos($col->Type, "int") !== false ||                    strpos($col->Type, "decimal") !== false ||                    strpos($col->Type, "float") !== false ||                    strpos($col->Type, "double") !== false ||                    strpos($col->Type, "real") !== false ||                    strpos($col->Type, "bit") !== false ||                    strpos($col->Type, "boolean") !== false ||                    strpos($col->Type, "serial") !== false;            }        }        if ($keysArray[$i] != "") {            if ($i != 0) {                $where = $where . " and ";            }            if ($isNumeric) {                $where = $where . $keysArray[$i] . " = %d";                $vals[] = sanitize_text_field2($valsArray[$i]);            } else {                if ($fuzzy == "checked") {                    $where = $where . $keysArray[$i] . " like %s";                    $vals[] = sanitize_text_field2('%' . $valsArray[$i] . '%');                } else {                    $where = $where . $keysArray[$i] . " = %s";                    $vals[] = sanitize_text_field2($valsArray[$i]);                }            }        }    }    //Get the records    if (count($vals) > 0) {        $sql = $eat_db->prepare("select * from " . $table2Edit . " where " . $where . " ORDER BY `id` LIMIT " . $offSet . ", " . $eat_cols . "", $vals);    } else {        $sql = $eat_db->prepare("select * from " . $table2Edit . " ORDER BY `id` LIMIT " . $offSet . ", " . $eat_cols . "", null);    }    $records = stripslashes_deep($eat_db->get_results($sql, 'ARRAY_A'));    //lets work out how many columns we're going to display (max from options)    $numRows = $eat_db->num_rows;    ?>    <hr>    <?php    if ($offSet > 0) {        ?>        <button class="button" id="buttonPrev">            &lt;&lt; <?php echo __('Previous', 'tns_edit_table') . ' ' . $eat_cols ?></button>&nbsp;        <?php    }    if ($numRows == (int)$eat_cols) {        ?>        <button class="button" id="buttonNext"><?php echo __('Next', 'tns_edit_table') . ' ' . $eat_cols ?>&gt;&gt;        </button>        <?php    }    if ($numRows > 0) {        $primaryKeyExists = false;        ?>        <style>            .limitWidth {                width: 100px            }            textarea.limitWidth {                height: 225px            }        </style>        <div style="overflow: auto">            <!--<button id="refreshTable">Reload & overwrite all data!</button><br>-->            <table id="tableCols">                <!--<tr>					<td><strong><?php _e('Column', 'tns_edit_table'); ?></strong></td>			<?php                for ($i = 0; $i < $numRows; $i++) {                    ?>				<td></td>				<?php                }                ?>				</tr>-->                <tr><?php                    foreach ($cols as $col) {                        ?>                        <td><?php echo $col->Field; ?></td><?php                    }                    ?></tr>                <?php                //need to write the results vertically                //var_dump($cols); //names of columns                //var_dump($numRows);                //var_dump($records);                for ($in = 0; $in < $numRows; $in++) {                    ?>                    <tr><?php                        foreach ($cols as $col) {                            $row = $records[$in];                            if ($col->Key == "PRI") {                                $primaryKeyExists = true;                                ?>                                <td style="background-color:white"                                    id="PRIMARY:<?php echo $col->Field; ?>"><?php echo $row[$col->Field]; ?></td>                                <?php                            } else {                                ?>                                <td id="<?php echo $col->Field; ?>">                                    <?php                                    $fieldValue = esc_html($row[$col->Field]);                                    if ($col->Field=='hidden') {                                        if ($fieldValue=='1') {                                            ?>                                            <input type="checkbox" class="limitWidth" checked/>                                            <?php                                        } else {                                            ?>                                            <input type="checkbox" class="limitWidth"/>                                            <?php                                        }                                    } else if ($col->Field=='priority') {                                        ?>                                        <select class="limitWidth">                                            <option value="NORMAL" <?php echo(($fieldValue=='NORMAL')?'selected':''); ?>>NORMAL</option>                                            <option value="LOW" <?php echo(($fieldValue=='LOW')?'selected':''); ?>>LOW</option>                                            <option value="HIGHER" <?php echo(($fieldValue=='HIGHER')?'selected':''); ?>>HIGHER</option>                                            <option value="HIGHEST" <?php echo(($fieldValue=='HIGHEST')?'selected':''); ?>>HIGHEST</option>                                        </select>                                        <?php                                    } else {                                        ?>                                        <textarea class="limitWidth"                                                  type="text"><?php echo esc_html($row[$col->Field]); ?></textarea>                                        <?php                                    }                                    ?>                                </td>                                <?php                            }                        }                        ?>                        <!-- </tr> -->                        <?php                        //}                        ?>                        <!-- <tr> -->                        <!-- <td></td> -->                        <?php                        //for($i = 0; $i < $numRows; $i++)                        {                            $i = $in;                            if ($primaryKeyExists) //Do not show save or delete buttons if there is no primary key                            {                                ?>                                <td>                                    <?php                                    // Check that editor has rights to add                                    if (current_user_can('administrator') || (current_user_can('editor') && $options['eat_editorPrivEdit'] == 'yes')) {                                        ?>                                        <button class="button-primary"                                                id="save<?php echo $i + 1; ?>"><?php _e('Save', 'tns_edit_table'); ?></button>                                        <?php                                    }                                    ?>                                    <!--</td>                                    <td>--><br/><br/>                                    <?php                                    // Check that editor has rights to delete                                    if (current_user_can('administrator') || (current_user_can('editor') && $options['eat_editorPrivDelete'] == 'yes')) {                                        ?>                                        <button class="button-primary"                                                id="delete<?php echo $i + 1; ?>"><?php _e('Delete', 'tns_edit_table'); ?></button>                                        <?php                                    }                                    ?>                                </td>                                <?php                            }                        }                        ?>                    </tr>                    <?php                }                ?>                <tr>                    <td></td>                    <td></td>                </tr>            </table>            <script>            </script>        </div>        <?php    } else {        _e('No Results Found', 'tns_edit_table');    }    if (current_user_can('administrator') && $options['eat_debug'] == 'ON') {        echo '<br /><strong>DEBUG MODE ON</strong><br />' . $eat_db->last_query;    }    die();}add_action('wp_ajax_GetTable', 'TableDetails');function TableDetails(){    //Get required values    $table2Edit = $_POST['table2Edit'];    $eat_cols = $_POST['eat_cols'];    //connect to the database    $options = get_option('eat_options');    //$eat_db = new wpdb($options['eat_user'], $options['eat_pwd'], $options['eat_db'], $options['eat_host']);    global $wpdb;    $eat_db = $wpdb;    // Get column info    $cols = $eat_db->get_results("show columns from " . $table2Edit)    ?>    <hr>    <div style="display: none">        <button class="button-primary" title="Find records matching the values entered"                id="buttonFind"><?php _e('Find', 'tns_edit_table'); ?></button>        <script>            window.btnFindClickInterval = window.setInterval(function() {                if (typeof jQuery == 'function') {                    jQuery("#buttonFind").click();                    window.clearInterval(window.btnFindClickInterval);                }            },1000);        </script>        &nbsp;        <input type="checkbox" id="fuzzy"/>&nbsp;<?php _e('Fuzzy', 'tns_edit_table'); ?>        <?php        // Check that editor has rights to add        if (current_user_can('administrator') || (current_user_can('editor') && $options['eat_editorPrivAdd'] == 'yes')) {            ?>            &nbsp;            <button class="button-primary"                    title="<?php _e('Add a new record with the values entered', 'tns_edit_table'); ?>"                    id="buttonAdd"><?php _e('Add', 'tns_edit_table'); ?></button>            <?php        }        ?>        &nbsp;        <button class="button" title="<?php _e('Clear all the values', 'tns_edit_table'); ?>"                id="buttonReset"><?php _e('Reset', 'tns_edit_table'); ?></button>    </div>    <hr>    <div style="overflow: auto; display: none">        <table id="tableCols">            <tr>                <td><strong><?php _e('Column', 'tns_edit_table'); ?></strong></td>                <td><strong><?php _e('Value', 'tns_edit_table'); ?></strong></td>            </tr>            <?php            foreach ($cols as $col) {                ?>                <tr>                    <td>                        <?php                        echo $col->Field . " (" . $col->Type . ")";                        if ($col->Key == "PRI") {                            echo " [PRI]";                        }                        ?>                    </td>                    <td>                        <input type="text" id="<?php echo sanitize_text_field2($col->Field); ?>"/>                    </td>                </tr>                <?php            }            ?>        </table>    </div>    <?php    die();}//hook it upfunction add_dashboard_widget_eat(){    $options = get_option('eat_options');    if (((current_user_can('administrator') && $options['eat_admin'] == 'yes') || ((current_user_can('administrator') || current_user_can('editor')) && $options['eat_editor'] == 'yes')) && $options['eat_display'] == 'widget') {        wp_add_dashboard_widget('eat', 'TNS - Edit Any Table', 'tns_edit_table');    }}add_action('wp_dashboard_setup', 'add_dashboard_widget_eat');//Create separate page for pluginadd_action('admin_menu', 'edit_any_table_menu');function edit_any_table_menu(){    $options = get_option('eat_options');    if (((current_user_can('administrator') && $options['eat_admin'] == 'yes') || ((current_user_can('administrator') || current_user_can('editor')) && $options['eat_editor'] == 'yes')) && $options['eat_display'] == 'page') {        add_dashboard_page('TNS - Edit Any Table', 'TNS - Edit Any Table', 'read', 'edit_any_table', 'tns_edit_table');    }}// Add settings link on plugin pagefunction your_plugin_settings_link($links){    $settings_link = '<a href="options-general.php?page=eat_options.php">Settings</a>';    array_unshift($links, $settings_link);    return $links;}$plugin = plugin_basename(__FILE__);add_filter("plugin_action_links_$plugin", 'your_plugin_settings_link');?>